// Copyright (c) 2012 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#include "leveldb/filter_policy.h"

#include "leveldb/slice.h"
#include "util/hash.h"

namespace leveldb {

namespace {
static uint32_t BloomHash(const Slice& key) {
  return Hash(key.data(), key.size(), 0xbc9f1d34);
}

class BloomFilterPolicy : public FilterPolicy {
 public:
  explicit BloomFilterPolicy(int bits_per_key) : bits_per_key_(bits_per_key) {
    // We intentionally round down to reduce probing cost a little bit
    k_ = static_cast<size_t>(bits_per_key * 0.69);  // 0.69 =~ ln(2)
    if (k_ < 1) k_ = 1;
    if (k_ > 30) k_ = 30;
  }

  const char* Name() const override { return "leveldb.BuiltinBloomFilter2"; }

  void CreateFilter(const Slice* keys, int n, std::string* dst) const override {
    // Compute bloom filter size (in both bits and bytes)
    /** 1、先根据m = n * bits_per_key_计算出理论上的bits数
     * 此时bits并不一定刚好为8（1个字节）的倍数 */
    size_t bits = n * bits_per_key_;

    // For small n, we can see a very high false positive rate.  Fix it
    // by enforcing a minimum bloom filter length.
    /** bits最小64位，8个字节 */
    if (bits < 64) bits = 64;

    /** 2、将bits折合到字节维度，然后向上取整，计算真实的bits大小
     * 此处+7是为了向上取整，当bits不是8的倍数时，多出来的部分算1个字节 */
    size_t bytes = (bits + 7) / 8;
    bits = bytes * 8;

    /** 3、具体的bloomfilter位图信息填充在dst中，因此根据bytes大小对dst进行扩容
     * 遍历每个key，计算hash后将其hash值写入到dst中*/
    const size_t init_size = dst->size();
    dst->resize(init_size + bytes, 0);
    /** 在过滤器集合最后记录上需要k_次hash */
    dst->push_back(static_cast<char>(k_));  // Remember # of probes in filter
    char* array = &(*dst)[init_size];
    for (int i = 0; i < n; i++) {
      // Use double-hashing to generate a sequence of hash values.
      // See analysis in [Kirsch,Mitzenmacher 2006].
      /** h为首个hash值，后面根据多次移位和加法得到多轮hash值 */
      uint32_t h = BloomHash(keys[i]);
      const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
      for (size_t j = 0; j < k_; j++) {
        const uint32_t bitpos = h % bits; /** 取余，得到元素在位列bits中的位置 */
        /** bitpos/8 计算元素在第几个字节
         * (1 << (bitpos % 8)) 计算元素在字节的第几位
         * 例如：
         * bitpos为3，则元素在第1个字节的第3位上，那么这位上应该赋值为1
         * bitpos为11，则元素在第2个字节的第3位上，那么这位上应该赋值为1
         * 或运算|，当原来该位为1是，值保持不变 */
        array[bitpos / 8] |= (1 << (bitpos % 8));
        h += delta;
      }
    }
  }

  bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const override {
    const size_t len = bloom_filter.size();
    if (len < 2) return false;

    const char* array = bloom_filter.data();
    const size_t bits = (len - 1) * 8;

    // Use the encoded k so that we can read filters generated by
    // bloom filters created using different parameters.
    /** 最后一位存放的是k_的大小
     * 注意：k的值是要根据bloom_filter的编码计算出来，而不能直接用当前类this->k_
     * 逻辑的健壮性更强 */
    const size_t k = array[len - 1];
    if (k > 30) {
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      return true;
    }

    uint32_t h = BloomHash(key);
    const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
    for (size_t j = 0; j < k; j++) {
      const uint32_t bitpos = h % bits;
      /** 只要有1个hash值不匹配，就说明key不在bloomfilter中，直接返回false */
      if ((array[bitpos / 8] & (1 << (bitpos % 8))) == 0) return false;
      h += delta;
    }
    return true;
  }

 private:
  /** bits_per_key_ = m/n，其中m为位图的bits数，n为key的个数
   * k为hash函数个数
   * 根据论文研究，最佳的k值为m/n * ln(2), 即k = bits_per_key_ * 0.69 */
  size_t bits_per_key_;
  size_t k_;
};
}  // namespace

const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {
  return new BloomFilterPolicy(bits_per_key);
}

}  // namespace leveldb
